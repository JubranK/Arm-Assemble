; Jubran Khoury 1201264
; Arm assemble program that searches for the first even number, and the last odd number in an array of integers. 
; Store the even number in location EVEN
; Store the odd number in location ODD

;;; Directives
	PRESERVE8
	THUMB 
; Vector Table Mapped to Address 0 at Reset
; Linker requires __Vectors to be exported
	AREA RESET, DATA, READONLY
	EXPORT __Vectors
__Vectors 
	DCD 0x20001000 ; stack pointer value when stack is empty
	DCD Reset_Handler ; reset vector
 
	ALIGN
 
;Your Data section
;AREA DATA
EVEN DCD EVEN1
ODD DCD ODD1
	
N DCD 12
NUM1 DCD 5, 3, 3, 3, 3, 3, 4, 30, 31, 81, 5, 2  
POINTER DCD NUM1
	AREA MYRAM, DATA, READWRITE
		
EVEN1 DCD 0
ODD1 DCD 0
	
; The program
; Linker requires Reset_Handler
	AREA MYCODE, CODE, READONLY
 ENTRY
 EXPORT Reset_Handler

Reset_Handler
;;;;;;;;;;User Code Start from the next line;;;;;;;;;;;;;;;;;
	LDR R1,=NUM1 

	MOV R8, #12 ; number of elements in the array (12 element) 
	
	MOV R0,#2 
	
	MOV R11,#0 

LOOP
	LDR R3,[R1] 

; At first Calculate the mod (the modulus of division by 2), then the mod maybe 0 
; => even number => store it in location "EVEN" and move to next element.
; Or maybe not => odd => store it (in R9) and move to the next element
; if there is a new odd number then store it instead of the previous one
; if reached the end of the array then the last odd number(which stored in R9) 
;Finally stored in the location named ODD.	
																																	
	; calculate the mod
	SDIV R4, R3, R0
	MUL R5, R4, R0
	SUBS R4, R3, R5 ; R4 contains the modulus 
	CMP R4,#0 ; compare the moulus with 0 
	BNE ODD_Number ; odd number 
	;else => even
	B EVEN_Number_Is_Founded
	
ODD_Number ; odd number then store it into R9
	MOV R9,R3 ; store it into R9
	
	; move to the next element
	ADD R1,R1,#4 
	SUBS R8,R8,#1
	CMP R8,#0 ; if equal => the end of the array
	BEQ STORE_THE_LAST_ODD_NUMBER_INTO_LOCATION_ODD  
	;else
	B LOOP ; back to the loop

EVEN_Number_Is_Founded ; even number is founded ,then

	CMP R11,#0 ; if equal then this is the first even number, then store it in R12
	MOVEQ R12,R3
	
	ADD R11,R11,#1 ; incremented every even number so that only store the first even number 
				   ; That is stored in R12  
				   ;Finally  in location named "EVEN"
	
	;store that even number (which in R3) into R12
	LDR R10, EVEN													
	STR R12, [R10] 
		
	; move to the next element
	ADD R1,R1,#4 
	SUBS R8,R8,#1
	CMP R8,#0 ; if equal => the end of the array , then to store the last odd number (which is stored in R9)
	BEQ STORE_THE_LAST_ODD_NUMBER_INTO_LOCATION_ODD
	;else
	B LOOP ; back to the loop

STORE_THE_LAST_ODD_NUMBER_INTO_LOCATION_ODD ; reached the end of the array => last odd number is stored in R9
											; => Store it into location ODD
	LDR R7, ODD														
	STR R9, [R7] 
	B ENDD

ENDD
	; To check the memory locations
	LDR R2, [R10] ; even
	LDR R6, [R7] ; odd

HERE B HERE

	END
